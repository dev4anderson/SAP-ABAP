class ZCL_UTIL_PD_OM definition
  public
  final
  create public .

public section.

  methods GET_NEXT_NUMBER
    importing
      !IV_OTYPE type PLOG-OTYPE
      !IV_PLVAR type PLOG-PLVAR default '01'
    returning
      value(RV_OBJID) type PLOG-OBJID .
  interface IF_HRBAS_CONSTANTS load .
  methods READ_INFTY
    importing
      !IV_OTYPE type OTYPE
      !IV_OBJID type OBJEKTID
      !IV_INFTY type INFTY
      !IV_BEGDA type BEGDA default SY-DATUM
      !IV_ENDDA type ENDDA default IF_HRBAS_CONSTANTS=>HIGH_DATE
    changing
      !CT_INNNN type STANDARD TABLE .
  methods GET_HIERARCHICAL_LEVEL
    importing
      !IV_ORGEH type ORGEH
      !IV_HILFM type HILFM default '001'
      !IV_DATE type DATUM
    returning
      value(RV_ORGEH_SUP) type ORGEH .
  methods GET_STELL_FROM_PLANS
    importing
      !IV_PLANS type PLANS
      !IV_DATE type DATUM default SY-DATUM
    returning
      value(RV_STELL) type STELL .
  methods GET_OBJID_DESCRIPTION
    importing
      !IV_OTYPE type OTYPE
      !IV_OBJID type OBJEKTID
      !IV_DATE type DATUM default SY-DATUM
    returning
      value(RV_STEXT) type STEXT .
  methods GET_INFTY_FIELD_VALUE
    importing
      !IV_OTYPE type OTYPE
      !IV_OBJID type OBJEKTID
      !IV_INFTY type INFTY
      !IV_SUBTY type SUBTY optional
      !IV_DATE type DATUM default SY-DATUM
      !IV_FIELDNAME type FIELDNAME
    exporting
      value(EV_FIELDVALUE) type ANY .
  methods INSERT_INFTY_1002
    importing
      !IV_PLVAR type HRP1000-PLVAR
      !IV_OTYPE type HRP1000-OTYPE
      !IV_OBJID type HRP1000-OBJID
      !IV_SUBTY type HRP1002-SUBTY
      !IV_BEGDA type HRP1000-BEGDA default IF_HRBAS_CONSTANTS=>LOW_DATE
      !IV_ENDDA type HRP1000-ENDDA default IF_HRBAS_CONSTANTS=>HIGH_DATE
      !IT_TEXT type PT1002TAB
    raising
      CX_HRPA_MISSING_INFTY_DATA .
  methods CUT_INFTY
    importing
      !IV_GDATE type GDATE
      !IV_HISTO type HISTO default SPACE
      !IT_INNNN type STANDARD TABLE
    returning
      value(RS_HRIPKEY) type HRIPKEY
    raising
      CX_HRPA_MISSING_INFTY_DATA .
  methods UPDATE_INFTY
    importing
      !IT_INNNN type STANDARD TABLE
    returning
      value(RS_HRIPKEY) type HRIPKEY
    raising
      CX_HRPA_MISSING_INFTY_DATA .
  methods INSERT_INFTY
    importing
      !IT_INNNN type STANDARD TABLE
    returning
      value(RS_HRIPKEY) type HRIPKEY
    raising
      CX_HRPA_MISSING_INFTY_DATA .
  methods INSERT_INFTY_1001
    importing
      !IS_1001 type P1001
    raising
      CX_HRPA_MISSING_INFTY_DATA .
  methods CONSTRUCTOR .
  methods GET_TEXTS
    returning
      value(RO_OBJECT) type ref to ZCL_UTIL_OM_TEXTS .
protected section.
private section.

  class-data MO_TEXTS type ref to ZCL_UTIL_OM_TEXTS .
ENDCLASS.



CLASS ZCL_UTIL_PD_OM IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    mo_texts = NEW  zcl_util_om_texts( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->CUT_INFTY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_GDATE                       TYPE        GDATE
* | [--->] IV_HISTO                       TYPE        HISTO (default =SPACE)
* | [--->] IT_INNNN                       TYPE        STANDARD TABLE
* | [<-()] RS_HRIPKEY                     TYPE        HRIPKEY
* | [!CX!] CX_HRPA_MISSING_INFTY_DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD cut_infty.
    DATA: EL_PPPAR TYPE PPPAR.

*   Forçar ligação temporal 2
    EL_PPPAR-timco = 2.

    CALL FUNCTION 'RH_CUT_INFTY'
      EXPORTING
        gdate              = iv_gdate
        histo              = iv_histo
        vtask              = 'D'
        DEL_SUCC           = abap_true
        PPPAR_IMP          = EL_PPPAR
      TABLES
        innnn              = it_innnn
      EXCEPTIONS
        error_during_cut   = 1
        no_authorization   = 2
        gdate_before_begda = 3
        cut_of_timco_one   = 4
        corr_exit          = 5.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.

    CALL FUNCTION 'RH_UPDATE_DATABASE'
      EXPORTING
        vtask     = 'S'
      EXCEPTIONS
        corr_exit = 1
        OTHERS    = 2.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.
    TRY .
        MOVE-CORRESPONDING it_innnn[ 1 ] TO rs_hripkey.

      CATCH cx_sy_itab_line_not_found.

    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->GET_HIERARCHICAL_LEVEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ORGEH                       TYPE        ORGEH
* | [--->] IV_HILFM                       TYPE        HILFM (default ='001')
* | [--->] IV_DATE                        TYPE        DATUM
* | [<-()] RV_ORGEH_SUP                   TYPE        ORGEH
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_hierarchical_level.
    DATA: tl_1010      TYPE TABLE OF p1010,
          tl_structure TYPE struc_t.


    CALL FUNCTION 'HR_STRUCTURE_GET'
      EXPORTING
        root_plvar       = '01'
        root_otype       = 'O'
        root_objid       = iv_orgeh
        begda            = iv_date
        endda            = iv_date
        pathid           = 'O-O'
      IMPORTING
        result_structure = tl_structure
      EXCEPTIONS
        plvar_not_found  = 1
        root_not_found   = 2
        path_not_found   = 3
        internal_error   = 4.


    LOOP AT tl_structure INTO DATA(el_structure)
      WHERE otype = 'O'.
      read_infty(
        EXPORTING
          iv_otype = 'O'
          iv_objid = CONV objektid(  el_structure-objid )
          iv_infty = '1010'
          iv_begda = iv_date
        CHANGING
          ct_innnn = tl_1010
             ).
      TRY .
          rv_orgeh_sup = tl_1010[ hilfm = iv_hilfm ]-objid.
          EXIT.
        CATCH cx_sy_itab_line_not_found.

      ENDTRY.


    ENDLOOP.




  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->GET_INFTY_FIELD_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_OTYPE                       TYPE        OTYPE
* | [--->] IV_OBJID                       TYPE        OBJEKTID
* | [--->] IV_INFTY                       TYPE        INFTY
* | [--->] IV_SUBTY                       TYPE        SUBTY(optional)
* | [--->] IV_DATE                        TYPE        DATUM (default =SY-DATUM)
* | [--->] IV_FIELDNAME                   TYPE        FIELDNAME
* | [<---] EV_FIELDVALUE                  TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_infty_field_value.
    DATA: l_estrut    TYPE char05.

    FIELD-SYMBOLS:
      <tab>   TYPE STANDARD TABLE,
      <wa>    TYPE any,
      <value> TYPE any.
    DATA: lt_comp TYPE cl_abap_structdescr=>component_table.
    DATA: lo_data TYPE REF TO data.
    DATA: lo_new_tab  TYPE REF TO cl_abap_tabledescr,
          lo_new_type TYPE REF TO cl_abap_structdescr,
          lo_struct   TYPE REF TO cl_abap_structdescr.


    CONCATENATE 'P' iv_infty INTO l_estrut.

    IF NOT l_estrut IS INITIAL.
      lo_struct  ?= cl_abap_typedescr=>describe_by_name( l_estrut ).
      lt_comp     = lo_struct->get_components( ).
*   Tipo
      lo_new_type = cl_abap_structdescr=>create( lt_comp ).
    ENDIF.


    IF NOT lt_comp IS INITIAL.
*   Tipo
      lo_new_type = cl_abap_structdescr=>create( lt_comp ).
*   Tabela
      lo_new_tab =  cl_abap_tabledescr=>create(
                   p_line_type  = lo_new_type
                   p_table_kind = cl_abap_tabledescr=>tablekind_std
                   p_unique     = abap_false ).

    ENDIF.

* 5. data to handle the new table type
    CLEAR lo_data.
    CREATE DATA lo_data TYPE HANDLE lo_new_tab.
    ASSIGN lo_data->* TO <tab>.

** Create dynamically structure
    CLEAR lo_data.
    CREATE DATA lo_data TYPE HANDLE lo_new_type.
    ASSIGN lo_data->* TO <wa>.

    read_infty(
      EXPORTING
        iv_otype = iv_otype
        iv_objid = iv_objid
        iv_infty = iv_infty
        iv_begda = iv_date
        iv_endda = iv_date
      CHANGING
        ct_innnn = <tab>
           ).
    CLEAR <wa>.

*   support
    IF iv_subty IS INITIAL.
      READ TABLE <tab>  INTO <wa> INDEX 1.
    ELSE.
      READ TABLE <tab>  INTO <wa>
      WITH KEY ('SUBTY') = iv_subty.
    ENDIF.

    CHECK sy-subrc IS INITIAL.

    ASSIGN COMPONENT iv_fieldname OF STRUCTURE <wa> TO <value>.

    IF <value> IS ASSIGNED.
*     Destinatário
      MOVE: <value> TO ev_fieldvalue.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->GET_NEXT_NUMBER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_OTYPE                       TYPE        PLOG-OTYPE
* | [--->] IV_PLVAR                       TYPE        PLOG-PLVAR (default ='01')
* | [<-()] RV_OBJID                       TYPE        PLOG-OBJID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_next_number.

    CALL FUNCTION 'RH_GET_NEXT_NUMBER'
      EXPORTING
*       ACTION                     = 'DIRECT'
        ext_number                 = '00000000'
        otype                      = iv_otype
        plvar                      = iv_plvar
      IMPORTING
        number                     = rv_objid
      EXCEPTIONS
        invalid_action             = 1
        number_must_be_zero        = 2
        invalid_object             = 3
        no_external_interval_found = 4
        no_internal_interval_found = 5
        invalid_number             = 6
        no_more_numbers_available  = 7
        OTHERS                     = 8.
    IF sy-subrc > 0.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.



  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->GET_OBJID_DESCRIPTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_OTYPE                       TYPE        OTYPE
* | [--->] IV_OBJID                       TYPE        OBJEKTID
* | [--->] IV_DATE                        TYPE        DATUM (default =SY-DATUM)
* | [<-()] RV_STEXT                       TYPE        STEXT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_objid_description.

    data: tl_1000 type TABLE OF p1000.

    read_infty( EXPORTING
                               iv_otype = iv_otype
                               iv_objid = iv_objid
                               iv_begda = iv_date
                               iv_endda = iv_date
                               iv_infty = '1000'
                             CHANGING
                               ct_innnn = tl_1000[]
                               ).

    TRY .
        rv_stext = tl_1000[ 1 ].
      CATCH cx_sy_itab_line_not_found.

    ENDTRY.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->GET_STELL_FROM_PLANS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PLANS                       TYPE        PLANS
* | [--->] IV_DATE                        TYPE        DATUM (default =SY-DATUM)
* | [<-()] RV_STELL                       TYPE        STELL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_stell_from_plans.
    DATA: tl_1001 TYPE TABLE OF p1001,
          tl_1000 TYPE TABLE OF p1000.

    read_infty( EXPORTING
                               iv_otype = 'S'
                               iv_objid =  iv_plans
                               iv_begda = iv_date
                               iv_endda = iv_date
                               iv_infty = '1001'
                             CHANGING
                               ct_innnn = tl_1001[]
                               ).

    TRY .

        rv_stell =  tl_1001[ rsign = 'B' relat = '007' ]-sobid .
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->GET_TEXTS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_OBJECT                      TYPE REF TO ZCL_UTIL_OM_TEXTS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method GET_TEXTS.

    ro_object = mo_texts.

  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->INSERT_INFTY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_INNNN                       TYPE        STANDARD TABLE
* | [<-()] RS_HRIPKEY                     TYPE        HRIPKEY
* | [!CX!] CX_HRPA_MISSING_INFTY_DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD insert_infty.


     CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = it_innnn
      EXCEPTIONS
        no_authorization    = 1
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.

    CALL FUNCTION 'RH_UPDATE_DATABASE'
      EXPORTING
        vtask     = 'S'
      EXCEPTIONS
        corr_exit = 1
        OTHERS    = 2.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.
    TRY .
        MOVE-CORRESPONDING it_innnn[ 1 ] TO rs_hripkey.

      CATCH cx_sy_itab_line_not_found.

    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->INSERT_INFTY_1001
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_1001                        TYPE        P1001
* | [!CX!] CX_HRPA_MISSING_INFTY_DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD insert_infty_1001.
    DATA: tl_1001 TYPE TABLE OF hri1001.
    DATA: el_1001 TYPE hri1001.
    APPEND INITIAL LINE TO tl_1001.
    MOVE-CORRESPONDING is_1001 TO el_1001.
    tl_1001[ lines( tl_1001 ) ] = el_1001.


    CALL FUNCTION 'RH_INSERT_INFTY_1001_EXT'
      EXPORTING
        fcode                   = 'INSE'
        vtask                   = 'S'
      TABLES
        innnn                   = tl_1001
      EXCEPTIONS
        no_authorization        = 1
        error_during_insert     = 2
        relation_not_reversible = 3
        corr_exit               = 4
        begda_greater_endda     = 5.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.

    CALL FUNCTION 'RH_UPDATE_DATABASE'
      EXPORTING
        vtask     = 'S'
      EXCEPTIONS
        corr_exit = 1
        OTHERS    = 2.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->INSERT_INFTY_1002
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PLVAR                       TYPE        HRP1000-PLVAR
* | [--->] IV_OTYPE                       TYPE        HRP1000-OTYPE
* | [--->] IV_OBJID                       TYPE        HRP1000-OBJID
* | [--->] IV_SUBTY                       TYPE        HRP1002-SUBTY
* | [--->] IV_BEGDA                       TYPE        HRP1000-BEGDA (default =IF_HRBAS_CONSTANTS=>LOW_DATE)
* | [--->] IV_ENDDA                       TYPE        HRP1000-ENDDA (default =IF_HRBAS_CONSTANTS=>HIGH_DATE)
* | [--->] IT_TEXT                        TYPE        PT1002TAB
* | [!CX!] CX_HRPA_MISSING_INFTY_DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD insert_infty_1002.


    DATA langu    TYPE sy-langu.
    DATA plvar    TYPE hrp1000-plvar.
    DATA otype    TYPE hrp1000-otype.
    DATA objid    TYPE hrp1000-objid.
    DATA begda    TYPE p1000-begda.
    DATA endda    TYPE p1000-endda.
    DATA subty    TYPE p1002-subty.
    DATA duty     TYPE sy-input.
    DATA vtask    TYPE hrrhap-vtask.
    DATA ptxt1002 TYPE STANDARD TABLE OF pt1002.

    DATA(TL_TEXT) = IT_TEXT[].

    CALL FUNCTION 'RH_OBJECT_DESCRIPTION_WRITE'
      EXPORTING
        plvar                = iv_plvar
        otype                = iv_otype
        objid                = iv_objid
        begda                = iv_begda
        endda                = iv_endda
        subty                = iv_subty
        VTASK                = 'D'
      TABLES
        ptxt1002             = TL_TEXT
      EXCEPTIONS
        object_not_found     = 1
        description_required = 2
        no_authority         = 3
        error_during_insert  = 4
        invalid_date         = 5
        undefined            = 6.


    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->READ_INFTY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_OTYPE                       TYPE        OTYPE
* | [--->] IV_OBJID                       TYPE        OBJEKTID
* | [--->] IV_INFTY                       TYPE        INFTY
* | [--->] IV_BEGDA                       TYPE        BEGDA (default =SY-DATUM)
* | [--->] IV_ENDDA                       TYPE        ENDDA (default =IF_HRBAS_CONSTANTS=>HIGH_DATE)
* | [<-->] CT_INNNN                       TYPE        STANDARD TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_infty.


    CALL FUNCTION 'RH_READ_INFTY'
      EXPORTING
        plvar                = '01'
        otype                = iv_otype
        objid                = iv_objid
        infty                = iv_infty
        begda                = iv_begda
        endda                = iv_endda
      TABLES
        innnn                = ct_Innnn
      EXCEPTIONS
        all_infty_with_subty = 1
        nothing_found        = 2
        no_objects           = 3
        wrong_condition      = 4
        wrong_parameters     = 5.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_UTIL_PD_OM->UPDATE_INFTY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_INNNN                       TYPE        STANDARD TABLE
* | [<-()] RS_HRIPKEY                     TYPE        HRIPKEY
* | [!CX!] CX_HRPA_MISSING_INFTY_DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_infty.


    CALL FUNCTION 'RH_UPDATE_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = it_innnn
      EXCEPTIONS
        error_during_update = 1
        no_authorization    = 2
        repid_form_initial  = 3
        corr_exit           = 4.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.

    CALL FUNCTION 'RH_UPDATE_DATABASE'
      EXPORTING
        vtask     = 'S'
      EXCEPTIONS
        corr_exit = 1
        OTHERS    = 2.

    IF NOT sy-subrc IS INITIAL.
      RAISE EXCEPTION TYPE cx_hrpa_missing_infty_data.
    ENDIF.
    TRY .
        MOVE-CORRESPONDING it_innnn[ 1 ] TO rs_hripkey.

      CATCH cx_sy_itab_line_not_found.

    ENDTRY.
  ENDMETHOD.
ENDCLASS.
